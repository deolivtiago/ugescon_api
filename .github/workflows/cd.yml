name: cd

on:
  push:
    branches: [main]

jobs:
  test:
    name: Build and test
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test

    services:
      postgres:
        image: postgres:14
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup elixir
        uses: erlef/setup-beam@v1
        id: beam
        with:
          elixir-version: "1.14"
          otp-version: "25.2"

      - name: Get cache
        uses: actions/cache@v2
        with:
          path: |
            deps
            _build
          key: >-
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-${{ hashFiles('**/mix.lock') }}
      - name: Get dependencies
        run: mix do deps.get, deps.compile

      - name: Check unused deps
        run: mix deps.unlock --check-unused

      - name: Compile code
        run: mix compile --warnings-as-errors

      - name: Check formatting
        run: mix format --check-formatted

      - name: Run credo
        run: mix credo --strict

      - name: Setup database
        run: mix setup

      - name: Run tests
        run: mix test

      - name: Run coveralls
        run: mix coveralls.github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to Gigalixir
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      MIX_ENV: prod

    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - run: sudo pip install gigalixir --ignore-installed six
      - run: gigalixir login -e "${{ secrets.GIGALIXIR_EMAIL }}" -p "${{ secrets.GIGALIXIR_PASSWORD }}" -y
      - run: gigalixir git:remote ${{ secrets.GIGALIXIR_APP_NAME }}
      - run: git push -f gigalixir main
      - run: mkdir ~/.ssh
      - run: printf "Host *\n StrictHostKeyChecking no" > ~/.ssh/config
      - run: echo "${{ secrets.GIGALIXIR_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
      - run: sudo chmod 0600 ~/.ssh/id_rsa
      - run: gigalixir ps:migrate -a ${{ secrets.GIGALIXIR_APP_NAME }}
